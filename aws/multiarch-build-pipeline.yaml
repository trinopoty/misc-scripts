Parameters:
  BuildSourceRepository:
    Type: String
    Description: ID of repository to build
  BuildSourceBranch:
    Type: String
    Description: Name of branch to build
    Default: master
  BuildSourceConnectionArn:
    Type: String
    Description: ARN of codestar connection, required for bitbucket
  BuildImageRepository:
    Type: String
    Description: URI of repository (not tag)
  BuildspecInternal:
    Type: String
    Default: false
    Description: Use internal buildspec instead of repository buildspec file
    AllowedValues:
      - true
      - false
  BuildArch:
    Type: String
    Default: amd64
    AllowedValues:
      - amd64
      - arm64
      - multi

  ExternalBuildBucket:
    Type: String
    Default: ''
  BuildStatusReportSnsTopic:
    Type: String
    Default: ''

Conditions:
  CreateBuildBucket: !Equals [ '', !Ref ExternalBuildBucket ]
  EnableBuildStatusReport: !Equals [ '', !Ref BuildStatusReportSnsTopic ]

  CreateAmd64Build: !Or [ !Equals [ Ref: BuildArch, 'amd64' ], !Equals [ Ref: BuildArch, 'multi' ] ]
  CreateArm64Build: !Or [ !Equals [ Ref: BuildArch, 'arm64' ], !Equals [ Ref: BuildArch, 'multi' ] ]
  CreateMultiArchBuild: !Equals [ Ref: BuildArch, 'multi' ]
  UseInternalBuildspec: !Equals [ !Ref BuildspecInternal, 'true' ]

Resources:
  BuildBucket:
    Type: 'AWS::S3::Bucket'
    Condition: CreateBuildBucket

  BuildLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 14

  # Build pipeline
  BuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
      Policies:
        - PolicyName: Common
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource:
                  - !If [ CreateBuildBucket, !GetAtt BuildBucket.Arn, !Sub 'arn:aws:s3:::${ExternalBuildBucket}' ]
                  - !If [ CreateBuildBucket, !Sub '${BuildBucket.Arn}/*', !Sub 'arn:aws:s3:::${ExternalBuildBucket}/*' ]
              - Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: !Ref BuildSourceConnectionArn
              - Effect: Allow
                Action: codecommit:GitPull
                Resource: '*'
        - PolicyName: Build
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt BuildLogs.Arn
        - PolicyName: Pipeline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                Condition:
                  StringEqualsIfExists:
                    'iam:PassedToService':
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: '*'

  BuildImageAmd64:
    Type: 'AWS::CodeBuild::Project'
    Condition: CreateAmd64Build
    Properties:
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Type: PLAINTEXT
            Name: CBARG_IMAGE_REPO
            Value: !Ref BuildImageRepository
          - Type: PLAINTEXT
            Name: CBARG_MULTIARCH
            Value: !If [ CreateMultiArchBuild, '1', '0' ]
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogs
          Status: ENABLED
      Source:
        Type: CODEPIPELINE
        BuildSpec: !If
          - UseInternalBuildspec
          - |
            version: 0.2

            phases:
              pre_build:
                commands:
                  - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                  - export GIT_TAG=$(git tag --contains | head -1)
                  - export BUILD_ARCH=$(uname -m)
                  - '[[ ${CBARG_MULTIARCH} == 1 ]] && export DOCKER_TAG_VERSION="$GIT_TAG-$BUILD_ARCH" || true'
                  - '[[ ${CBARG_MULTIARCH} == 0 ]] && export DOCKER_TAG_VERSION="$GIT_TAG" || true'
              build:
                on-failure: ABORT
                commands:
                  - docker build -t ${CBARG_IMAGE_REPO}:latest .
              post_build:
                commands:
                  - '[[ "$GIT_TAG" != "" ]] && docker tag ${CBARG_IMAGE_REPO}:latest ${CBARG_IMAGE_REPO}:${DOCKER_TAG_VERSION} || true'
                  - '[[ "$GIT_TAG" != "" ]] && docker push ${CBARG_IMAGE_REPO}:${DOCKER_TAG_VERSION} || true'

            env:
              exported-variables:
                - CODEBUILD_BUILD_NUMBER

            artifacts:
              files: '**/*'
          - !Ref AWS::NoValue

  BuildImageArm64:
    Type: 'AWS::CodeBuild::Project'
    Condition: CreateArm64Build
    Properties:
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: ARM_CONTAINER
        EnvironmentVariables:
          - Type: PLAINTEXT
            Name: CBARG_IMAGE_REPO
            Value: !Ref BuildImageRepository
          - Type: PLAINTEXT
            Name: CBARG_MULTIARCH
            Value: !If [ CreateMultiArchBuild, '1', '0' ]
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogs
          Status: ENABLED
      Source:
        Type: CODEPIPELINE
        BuildSpec: !If
          - UseInternalBuildspec
          - |
            version: 0.2

            phases:
              pre_build:
                commands:
                  - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                  - export GIT_TAG=$(git tag --contains | head -1)
                  - export BUILD_ARCH=$(uname -m)
                  - '[[ ${CBARG_MULTIARCH} == 1 ]] && export DOCKER_TAG_VERSION="$GIT_TAG-$BUILD_ARCH" || true'
                  - '[[ ${CBARG_MULTIARCH} == 0 ]] && export DOCKER_TAG_VERSION="$GIT_TAG" || true'
              build:
                on-failure: ABORT
                commands:
                  - docker build -t ${CBARG_IMAGE_REPO}:latest .
              post_build:
                commands:
                  - '[[ "$GIT_TAG" != "" ]] && docker tag ${CBARG_IMAGE_REPO}:latest ${CBARG_IMAGE_REPO}:${DOCKER_TAG_VERSION} || true'
                  - '[[ "$GIT_TAG" != "" ]] && docker push ${CBARG_IMAGE_REPO}:${DOCKER_TAG_VERSION} || true'

            env:
              exported-variables:
                - CODEBUILD_BUILD_NUMBER

            artifacts:
              files: '**/*'
          - !Ref AWS::NoValue

  BuildImageManifest:
    Type: 'AWS::CodeBuild::Project'
    Condition: CreateMultiArchBuild
    Properties:
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Type: PLAINTEXT
            Name: CBARG_IMAGE_REPO
            Value: !Ref BuildImageRepository
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogs
          Status: ENABLED
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2

          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                - export GIT_TAG=$(git tag --contains | head -1)
            build:
              on-failure: ABORT
              commands:
                - export DOCKER_CLI_EXPERIMENTAL=enabled
                - '[[ "$GIT_TAG" != "" ]] && docker pull ${CBARG_IMAGE_REPO}:${GIT_TAG}-x86_64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker pull ${CBARG_IMAGE_REPO}:${GIT_TAG}-aarch64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker manifest create ${CBARG_IMAGE_REPO}:${GIT_TAG} ${CBARG_IMAGE_REPO}:${GIT_TAG}-x86_64 ${CBARG_IMAGE_REPO}:${GIT_TAG}-aarch64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker manifest annotate --arch amd64 ${CBARG_IMAGE_REPO}:${GIT_TAG} ${CBARG_IMAGE_REPO}:${GIT_TAG}-x86_64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker manifest annotate --arch arm64 ${CBARG_IMAGE_REPO}:${GIT_TAG} ${CBARG_IMAGE_REPO}:${GIT_TAG}-aarch64 || true'
            post_build:
              commands:
                - '[[ "$GIT_TAG" != "" ]] && docker manifest push ${CBARG_IMAGE_REPO}:${GIT_TAG} || true'

  BuildPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt BuildRole.Arn
      ArtifactStore:
        Type: S3
        Location: !If [ CreateBuildBucket, !Ref BuildBucket, !Ref ExternalBuildBucket ]
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: At_Source
              Configuration:
                OutputArtifactFormat: CODEBUILD_CLONE_REF
                ConnectionArn: !Ref BuildSourceConnectionArn
                FullRepositoryId: !Ref BuildSourceRepository
                BranchName: !Ref BuildSourceBranch
                DetectChanges: true
        - Name: Build
          Actions:
            - !If
              - CreateAmd64Build
              - Name: Build-amd64
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                InputArtifacts:
                  - Name: At_Source
                OutputArtifacts:
                  - Name: At_Build_x86_64
                Configuration:
                  ProjectName: !Ref BuildImageAmd64
              - !Ref AWS::NoValue
            - !If
              - CreateArm64Build
              - Name: Build-arm64
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                InputArtifacts:
                  - Name: At_Source
                OutputArtifacts:
                  - Name: At_Build_arm64
                Configuration:
                  ProjectName: !Ref BuildImageArm64
              - !Ref AWS::NoValue
        - !If
          - CreateMultiArchBuild
          - Name: Manifest
            Actions:
              - Name: Manifest
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                InputArtifacts:
                  - Name: At_Source
                OutputArtifacts:
                  - Name: At_Build_Manifest
                Configuration:
                  ProjectName: !Ref BuildImageManifest
          - !Ref AWS::NoValue

  BuildNotificationRule:
    Type: 'AWS::CodeStarNotifications::NotificationRule'
    Condition: EnableBuildStatusReport
    Properties:
      DetailType: FULL
      EventTypeIds:
        - codepipeline-pipeline-action-execution-succeeded
        - codepipeline-pipeline-action-execution-failed
        - codepipeline-pipeline-action-execution-canceled
        - codepipeline-pipeline-pipeline-execution-started
        - codepipeline-pipeline-pipeline-execution-failed
        - codepipeline-pipeline-pipeline-execution-succeeded
        - codepipeline-pipeline-pipeline-execution-canceled
      Name: !Sub '${AWS::StackName}-Build-Notification'
      Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${BuildPipeline}'
      Targets:
        - TargetType: SNS
          TargetAddress: !Ref BuildStatusReportSnsTopic
