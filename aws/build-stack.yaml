Parameters:
  BuildSource:
    Type: String
    Default: bitbucket
    AllowedValues:
      - bitbucket
  BuildSourceRepository:
    Type: String
    Description: ID of repository to build
  BuildSourceBranch:
    Type: String
    Description: Name of branch to build
    Default: master
  BuildSourceConnectionArn:
    Type: String
    Description: ARN of codestar connection, required for bitbucket
  BuildImageRepository:
    Type: String
    Description: URI of repository (not tag)
  BuildMultiArch:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  BuildStatusReportEnabled:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  BuildStatusReportCredentialsArn:
    Type: String
    Description: ARN of secrets manager secret to provide credentials for build notifications
  BuildStatusReportCredentialsName:
    Type: String
    Description: Name of secrets manager secret to provide credentials for build notifications
  BuildStatusReportCredentialsKmsArn:
    Type: String
    Description: ARN of KMS key used to encrypt credentials (Optional if default key used)

Conditions:
  CreateMultiArchBuild: !Equals [ Ref: BuildMultiArch, 'true' ]
  CreateBuildStatusReport: !And
    - !Equals [ Ref: BuildStatusReportEnabled, 'true' ]
    - !Equals [ Ref: BuildSource, 'bitbucket' ]
    - !Not [ !Equals [ Ref: BuildStatusReportCredentialsArn, '' ] ]
  HasBuildStatusReportCredentials: !Not [ !Equals [ Ref: BuildStatusReportCredentialsArn, '' ] ]
  HasBuildStatusReportCredentialsKms: !Not [ !Equals [ Ref: BuildStatusReportCredentialsKmsArn, '' ] ]

Resources:
  # Build pipeline
  BuildBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
      Policies:
        - PolicyName: Build
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt BuildLogs.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !GetAtt BuildBucket.Arn
                  - !Sub
                    - '${Arn}/*'
                    - Arn: !GetAtt BuildBucket.Arn
              - Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: !Ref BuildSourceConnectionArn
              - Effect: Allow
                Action: codecommit:GitPull
                Resource: '*'

  BuildPipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Policies:
        - PolicyName: Pipeline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                Condition:
                  StringEqualsIfExists:
                    'iam:PassedToService':
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: !Ref BuildSourceConnectionArn
              - Effect: Allow
                Action: codecommit:GitPull
                Resource: '*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: '*'
              - Effect: Allow
                Action: 's3:*'
                Resource:
                  - !GetAtt BuildBucket.Arn
                  - !Sub
                    - '${Arn}/*'
                    - Arn: !GetAtt BuildBucket.Arn

  BuildStatusReportRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateBuildStatusReport
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: BuildStatusReporter
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                  - kms:Decrypt
                Resource:
                  - !GetAtt BuildStatusReportTable.Arn
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
                  - !If [ HasBuildStatusReportCredentials, !Ref BuildStatusReportCredentialsArn, !Ref AWS::NoValue ]
                  - !If [ HasBuildStatusReportCredentialsKms, !Ref BuildStatusReportCredentialsKmsArn, !Ref AWS::NoValue ]

  BuildBucket:
    Type: 'AWS::S3::Bucket'

  BuildLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 14

  BuildImageX8664:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      ServiceRole: !GetAtt BuildBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Type: PLAINTEXT
            Name: CBARG_IMAGE_REPO
            Value: !Ref BuildImageRepository
          - Type: PLAINTEXT
            Name: CBARG_MULTIARCH
            Value: !If [ CreateMultiArchBuild, '1', '0' ]
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogs
          Status: ENABLED
      Source:
        Type: CODEPIPELINE
  BuildImageArm64:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      ServiceRole: !GetAtt BuildBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: ARM_CONTAINER
        EnvironmentVariables:
          - Type: PLAINTEXT
            Name: CBARG_IMAGE_REPO
            Value: !Ref BuildImageRepository
          - Type: PLAINTEXT
            Name: CBARG_MULTIARCH
            Value: !If [ CreateMultiArchBuild, '1', '0' ]
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogs
          Status: ENABLED
      Source:
        Type: CODEPIPELINE
  BuildImageManifest:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      ServiceRole: !GetAtt BuildBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Type: PLAINTEXT
            Name: CBARG_IMAGE_REPO
            Value: !Ref BuildImageRepository
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogs
          Status: ENABLED
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2

          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                - export GIT_TAG=$(git tag --contains | head -1)
            build:
              on-failure: ABORT
              commands:
                - export DOCKER_CLI_EXPERIMENTAL=enabled
                - '[[ "$GIT_TAG" != "" ]] && docker pull ${!CBARG_IMAGE_REPO}:${!GIT_TAG}-x86_64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker pull ${!CBARG_IMAGE_REPO}:${!GIT_TAG}-aarch64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker manifest create ${!CBARG_IMAGE_REPO}:${!GIT_TAG} ${!CBARG_IMAGE_REPO}:${!GIT_TAG}-x86_64 ${!CBARG_IMAGE_REPO}:${!GIT_TAG}-aarch64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker manifest annotate --arch amd64 ${!CBARG_IMAGE_REPO}:${!GIT_TAG} ${!CBARG_IMAGE_REPO}:${!GIT_TAG}-x86_64 || true'
                - '[[ "$GIT_TAG" != "" ]] && docker manifest annotate --arch arm64 ${!CBARG_IMAGE_REPO}:${!GIT_TAG} ${!CBARG_IMAGE_REPO}:${!GIT_TAG}-aarch64 || true'
            post_build:
              commands:
                - '[[ "$GIT_TAG" != "" ]] && docker manifest push ${!CBARG_IMAGE_REPO}:${!GIT_TAG} || true'

  BuildPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt BuildPipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref BuildBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: At_Source
              Configuration:
                OutputArtifactFormat: CODEBUILD_CLONE_REF
                ConnectionArn: !Ref BuildSourceConnectionArn
                FullRepositoryId: !Ref BuildSourceRepository
                BranchName: !Ref BuildSourceBranch
                DetectChanges: true
        - Name: Build
          Actions:
            - Name: Build-x86_64
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: At_Source
              OutputArtifacts:
                - Name: At_Build_x86_64
              Configuration:
                ProjectName: !Ref BuildImageX8664
            - Name: Build-arm64
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: At_Source
              OutputArtifacts:
                - Name: At_Build_arm64
              Configuration:
                ProjectName: !Ref BuildImageArm64
        - Name: Manifest
          Actions:
            - Name: Manifest
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: At_Source
              OutputArtifacts:
                - Name: At_Build_Manifest
              Configuration:
                ProjectName: !Ref BuildImageManifest

  BuildNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Condition: CreateBuildStatusReport

  BuildNotificationTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Condition: CreateBuildStatusReport
    Properties:
      Topics:
        - !Ref BuildNotificationTopic
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref BuildNotificationTopic
            Principal:
              Service: codestar-notifications.amazonaws.com

  BuildNotificationRule:
    Type: 'AWS::CodeStarNotifications::NotificationRule'
    Condition: CreateBuildStatusReport
    Properties:
      DetailType: FULL
      EventTypeIds:
        - codepipeline-pipeline-action-execution-succeeded
        - codepipeline-pipeline-action-execution-failed
        - codepipeline-pipeline-action-execution-canceled
        - codepipeline-pipeline-action-execution-started
      Name: !Sub '${AWS::StackName}-Build-Notification'
      Resource: !Sub
        - 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'
        - Pipeline: !Ref BuildPipeline
      Targets:
        - TargetType: SNS
          TargetAddress: !Ref BuildNotificationTopic

  BuildStatusReportTable:
    Type: 'AWS::DynamoDB::Table'
    Condition: CreateBuildStatusReport
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: executionId
          AttributeType: S
      KeySchema:
        - AttributeName: executionId
          KeyType: HASH

  BuildStatusReportFunction:
    Type: 'AWS::Lambda::Function'
    Condition: CreateBuildStatusReport
    Properties:
      Runtime: python3.9
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt BuildStatusReportRole.Arn
      Environment:
        Variables:
          CREDENTIALS: !If [ HasBuildStatusReportCredentials, !Ref BuildStatusReportCredentialsName, !Ref AWS::NoValue ]
          CREDENTIALS_ARN: !If [ HasBuildStatusReportCredentials, !Ref BuildStatusReportCredentialsArn, !Ref AWS::NoValue ]
          SOURCE: !Ref BuildSource
          TABLE: !GetAtt BuildStatusReportTable.Arn
      Code:
        ZipFile: |
          import base64
          import json
          import os
          from urllib import request
          from urllib.parse import urlparse, parse_qs

          import boto3
          import botocore


          def get_dynamodb_client():
            arn_parser = botocore.utils.ArnParser()
            arn = arn_parser.parse_arn(os.environ['TABLE'])
            table_name = arn['resource'][6:]

            session = boto3.session.Session()
            return session.client(service_name='dynamodb', region_name=arn['region'],), table_name


          def get_credentials():
            arn_parser = botocore.utils.ArnParser()
            arn = arn_parser.parse_arn(os.environ['CREDENTIALS_ARN'])
            secret_name = os.environ['CREDENTIALS']

            session = boto3.session.Session()
            client = session.client(
              service_name='secretsmanager',
              region_name=arn['region'],)
            secret_response = client.get_secret_value(SecretId=secret_name)
            return json.loads(secret_response['SecretString'])


          def report_bitbucket_build(execution_id, repository_id, commit_hash, state, key, name, url):
            credentials = get_credentials()
            auth_header = 'Basic {0}'.format(
              base64.b64encode(
                '{0}:{1}'.format(
                  credentials['BITBUCKET_USERNAME'],
                  credentials['BITBUCKET_PASSWORD']).encode('utf8')).decode('utf8'))

            try:
              req_url = 'https://api.bitbucket.org/2.0/repositories/{0}/commit/{1}/statuses/build'.format(repository_id, commit_hash)
              req = request.Request(req_url, data=json.dumps({
                'state': state.upper(),
                'key': key,
                'name': name,
                'url': url,
                'description': '',
              }).encode('utf8'), headers={
                'Content-Type': 'application/json',
                'Authorization': auth_header,
              })
              res = request.urlopen(req)
            except urllib.error.HTTPError as e:
              print('Unable to report build status for execution({0})'.format(execution_id))


          def process_source(message):
            source_type = os.environ['SOURCE']
            if source_type.lower() == 'bitbucket':
              execution_id = message['detail']['execution-id']
              execution_url = urlparse(message['detail']['execution-result']['external-execution-url'])
              execution_url_query = parse_qs(execution_url.query)

              repository_id = execution_url_query['FullRepositoryId'][0]
              commit_hash = execution_url_query['Commit'][0]

              # Put record in DynamoDB
              dynamodb, table_name = get_dynamodb_client()
              dynamodb.put_item(
                TableName=table_name,
                Item={
                  'executionId': { 'S': execution_id },
                  'sourceType': { 'S': 'bitbucket' },
                  'repository': { 'S': repository_id },
                  'commitHash': { 'S': commit_hash },
                  'buildUrl': { 'S': message['detail']['execution-result']['external-execution-url'] },
                })


          def report_build_status(message):
            execution_id = message['detail']['execution-id']
            action = message['detail']['action']
            state = message['detail']['state']

            dynamodb, table_name = get_dynamodb_client()
            item_response = dynamodb.query(
              TableName=table_name,
              KeyConditionExpression='executionId = :executionId',
              ExpressionAttributeValues={ ':executionId': { 'S': execution_id } },)
            if item_response['Count'] > 0:
              item = item_response['Items'][0]
              source_type = item['sourceType']['S']
              repository_id = item['repository']['S']
              commit_hash = item['commitHash']['S']
              build_url = item['buildUrl']['S']

              build_status = {
                'STARTED': 'INPROGRESS',
                'SUCCEEDED': 'SUCCESSFUL',
                'FAILED': 'FAILED',
              }[state]

              report_bitbucket_build(
                execution_id,
                repository_id,
                commit_hash,
                build_status,
                action,
                '{0}-{1}'.format(action, execution_id),
                build_url)


          def process_record(record):
            get_credentials()

            if 'Sns' in record:
              message = json.loads(record['Sns']['Message'])
              if message['detailType'] == 'CodePipeline Action Execution State Change':
                execution_id = message['detail']['execution-id']
                stage = message['detail']['stage']
                action = message['detail']['action']
                state = message['detail']['state']

                if action == 'Source' and state == 'SUCCEEDED':
                  process_source(message)
                elif stage == 'Build' or stage == 'Manifest':
                  report_build_status(message)


          def lambda_handler(event, context):
            if event is not None and 'Records' in event:
              for item in event['Records']:
                process_record(item)

  BuildStatusReportInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Condition: CreateBuildStatusReport
    Properties:
      FunctionName: !GetAtt BuildStatusReportFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref BuildNotificationTopic

  BuildNotificationStatusReportSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: CreateBuildStatusReport
    Properties:
      TopicArn: !Ref BuildNotificationTopic
      Protocol: lambda
      Endpoint: !GetAtt BuildStatusReportFunction.Arn
